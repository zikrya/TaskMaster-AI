generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(cuid())
  clerkId                 String?          @unique
  email                   String           @unique
  username                String?          @unique
  name                    String?
  lastName                String?
  profilePicture          String?
  profilePictureHistory   Json?
  projects                Project[]
  sharedProjects          SharedProject[]
  comments                Comment[]
  customTickets           CustomTicket[]
  assignedChatResponses   ChatResponse[]   @relation("ChatResponseAssignee")
  assignedCustomTickets   CustomTicket[]   @relation("CustomTicketAssignee")
  notifications           Notification[]
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model Project {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  chatResponses ChatResponse[]
  customTickets CustomTicket[]
  sharedWith  SharedProject[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ChatResponse {
  id          Int      @id @default(autoincrement())
  request     String
  response    String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  description String?
  comments    Comment[]
  status      String?
  priority    String?
  assignee    User?    @relation("ChatResponseAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  createdAt   DateTime @default(now())
}

model CustomTicket {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  status      String?
  priority    String?
  comments    Comment[]
  assignee    User?    @relation("CustomTicketAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  createdAt   DateTime @default(now())
}

model Comment {
  id              Int          @id @default(autoincrement())
  content         String
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  chatResponse    ChatResponse? @relation(fields: [chatResponseId], references: [id])
  chatResponseId  Int?
  customTicket    CustomTicket? @relation(fields: [customTicketId], references: [id])
  customTicketId  Int?
  createdAt       DateTime     @default(now())
}

model SharedProject {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  url       String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}